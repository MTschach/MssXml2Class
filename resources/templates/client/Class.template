package {PACKAGE_NAME};

public class {CLASS_NAME}
{HAS_BASECLASS}         {BASE_CLASS}
{HAS_NO_BASECLASS}          extends de.mss.net.webservice.CheckRequiredFields
                        {INTERFACE}{INTERFACE_CHECK_REQUIRED_FIELDS} {
   {VERSION}


{CONSTANTS_START}
   /** {COMMENT} */
   public static final {FIELD_TYPE} {FIELD_NAME_WITH_VALUE};
   
{CONSTANTS_END}
{VARIABLES_START}
   /** {COMMENT} */
   {ANNOTATION}
   private {FIELD_TYPE} {FIELD_NAME_WITH_VALUE};
{VARIABLES_END}
   public {CLASS_NAME} () {
{HAS_BASECLASS}      super();
{HAS_NO_BASECLASS}      // nothing to do here
   }
   
{GETTER_START}
   {OVERRIDES}
   public {FIELD_TYPE} get{METHOD_NAME} () { return this.{FIELD_NAME}; }
{GETTER_END}
{SETTER_START}
   {OVERRIDES}
   public void set{METHOD_NAME} ({FIELD_TYPE} v) {THROWS} { this.{FIELD_NAME} = v; }
{IS_ENUM}   {OVERRIDES}
{IS_ENUM}   public void set{METHOD_NAME} (String v) {THROWS} { this.{FIELD_NAME} = {FIELD_TYPE}.getByApiValue(v); }
{SETTER_END}

   @Override
   public String toString() {
      StringBuilder sb = new StringBuilder(getClass().getName() + "[ ");
{TO_STRING_START}
      if (this.{FIELD_NAME} != null)
         sb.append("{PRINT_NAME} {" + {PRINT_VALUE} + "} ");
{TO_STRING_END}
{HAS_BASECLASS}      sb.append(super.toString());
      sb.append("] ");
      return sb.toString();
   }
   
   
   @Override
   public void checkRequiredFields() throws de.mss.utils.exception.MssException {
{HAS_BASECLASS}      super.checkRequiredFields();
{REQUIRED_START}
{CHECK_REQUIRED_START}
      {CHECK}
{CHECK_REQUIRED_END}
{REQUIRED_END}
   }
{PRINT_METHODS_START}
{METHOD}
{PRINT_METHODS_END}
{SPECIAL_METHODS_START}
{METHOD}
{SPECIAL_METHODS_END}
}
